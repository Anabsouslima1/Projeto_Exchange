#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

char cpfs[4][12] = {
    "12345678910",
    "11111111111",
    "22222222222",
    "33333333333"
};

char senhas[4][7] = {
    "123456",
    "234567",
    "345678",
    "456789"
};

char nomes[4][20] = {
    "Analiza Julia",
    "Ana",
    "Liza",
    "Julia"
};

float reais[4] = {0.00, 0.00, 0.00, 0.00};
float bitcoin[4] = {0.00, 0.00, 0.00, 0.00};
float ethereum[4] = {0.00, 0.00, 0.00, 0.00};
float ripple[4] = {0.00, 0.00, 0.00, 0.00};

void consultar_saldo(int cliente) {
    char senha_acesso_saldo[7]; // 6 dígitos + 1 para o caractere nulo

    while (1) {
        printf("==----------------------------==\n");
        printf("Digite sua senha: ");
        scanf("%s", senha_acesso_saldo);
        if (strcmp(senhas[cliente], senha_acesso_saldo) == 0) {
            printf("==----------------------------==\n");
            printf("Nome: %s\n", nomes[cliente]);
            printf("CPF: %c%c%c.%c%c%c.%c%c%c-%c%c\n", // Formatação do CPF
                cpfs[cliente][0], cpfs[cliente][1], cpfs[cliente][2],
                cpfs[cliente][3], cpfs[cliente][4], cpfs[cliente][5],
                cpfs[cliente][6], cpfs[cliente][7], cpfs[cliente][8],
                cpfs[cliente][9], cpfs[cliente][10]);
            printf("\nReais (R$): %.2f\n", reais[cliente]);
            printf("Bitcoin (BTC): %.6f\n", bitcoin[cliente]);
            printf("Ethereum (ETH): %.6f\n", ethereum[cliente]);
            printf("Ripple (XRP): %.6f\n", ripple[cliente]);
            return;
        } else {
            printf("Senha incorreta. Digite novamente.\n");
        }
    }
}

void salvar_saldos() {
    FILE *arquivo = fopen("saldos.bin", "wb");
    if (arquivo == NULL) {
        perror("Erro ao abrir o arquivo para salvar os saldos");
        return;
    }
    fwrite(reais, sizeof(float), 4, arquivo);
    fwrite(bitcoin, sizeof(float), 4, arquivo);
    fwrite(ethereum, sizeof(float), 4, arquivo);
    fwrite(ripple, sizeof(float), 4, arquivo);
    fclose(arquivo);
}

void carregar_saldos() {
    FILE *arquivo = fopen("saldos.bin", "rb");
    if (arquivo == NULL) {
        return;
    }
    fread(reais, sizeof(float), 4, arquivo);
    fread(bitcoin, sizeof(float), 4, arquivo);
    fread(ethereum, sizeof(float), 4, arquivo);
    fread(ripple, sizeof(float), 4, arquivo);
    fclose(arquivo);
}

void salvar_dados(int cliente, char operacao, float valor, const char* qual_moeda, const char* cotacao, float valor_cotacao, const char* taxa, float valor_taxa, float valor_reais, float valor_bitcoin, float valor_ethereum, float valor_ripple) {
    FILE *dados = fopen("dados_arq.bin", "ab");
    if (dados == NULL) {
        perror("Erro ao abrir o arquivo");
        return;
    }

    time_t t = time(NULL);
    struct tm tm = *localtime(&t);

    char cpf_cliente[12];
    strncpy(cpf_cliente, cpfs[cliente], sizeof(cpf_cliente));

    // Gravar dados
    fwrite(&tm, sizeof(tm), 1, dados);
    fwrite(&operacao, sizeof(char), 1, dados);
    fwrite(&valor, sizeof(float), 1, dados);
    fwrite(cpf_cliente, sizeof(char), sizeof(cpf_cliente), dados); // Grava o CPF
    fwrite(qual_moeda, sizeof(char), 10, dados); // Tamanho fixo
    fwrite(cotacao, sizeof(char), 10, dados); // Tamanho fixo
    fwrite(&valor_cotacao, sizeof(float), 1, dados);
    fwrite(taxa, sizeof(char), 10, dados); // Tamanho fixo
    fwrite(&valor_taxa, sizeof(float), 1, dados);
    fwrite(&valor_reais, sizeof(float), 1, dados);
    fwrite(&valor_bitcoin, sizeof(float), 1, dados);
    fwrite(&valor_ethereum, sizeof(float), 1, dados);
    fwrite(&valor_ripple, sizeof(float), 1, dados);

    fclose(dados);
}

void ler_dados(int cliente) {
    FILE *dados = fopen("dados_arq.bin", "rb");
    if (dados == NULL) {
        perror("Erro ao abrir o arquivo");
        return;
    }

    struct tm tm; // Estrutura para armazenar informações de data/hora
    char operacao, cpf_cliente[12];
    float valor, valor_cotacao, valor_taxa, valor_reais, valor_bitcoin, valor_ethereum, valor_ripple;
    char qual_moeda[10], cotacao[10], taxa[10];

    // Lê o arquivo até que não haja mais dados
    while (fread(&tm, sizeof(tm), 1, dados) == 1) {
        fread(&operacao, sizeof(char), 1, dados);
        fread(&valor, sizeof(float), 1, dados);
        fread(cpf_cliente, sizeof(char), sizeof(cpf_cliente), dados); // Lê o CPF
        fread(qual_moeda, sizeof(char), sizeof(qual_moeda), dados);
        fread(cotacao, sizeof(char), sizeof(cotacao), dados);
        fread(&valor_cotacao, sizeof(float), 1, dados);
        fread(taxa, sizeof(char), sizeof(taxa), dados);
        fread(&valor_taxa, sizeof(float), 1, dados);
        fread(&valor_reais, sizeof(float), 1, dados);
        fread(&valor_bitcoin, sizeof(float), 1, dados);
        fread(&valor_ethereum, sizeof(float), 1, dados);
        fread(&valor_ripple, sizeof(float), 1, dados);

        // Verifica se o CPF corresponde ao cliente logado
        if (strcmp(cpf_cliente, cpfs[cliente]) == 0) {
            printf("Data: %02d-%02d-%d %02d:%02d\n", 
                   tm.tm_mday, tm.tm_mon + 1, tm.tm_year + 1900, 
                   tm.tm_hour, tm.tm_min);
            printf("Operação: %c \tValor: %.2f\n", operacao, valor);
            printf("Moeda: %s \tCotação: %.2f\n", qual_moeda, valor_cotacao);
            printf("Taxa: %.2f\n", valor_taxa);
            printf("Reais: %.2f \tBitcoin: %.2f \tEthereum: %.2f \tRipple: %.2f\n", 
                   valor_reais, valor_bitcoin, valor_ethereum, valor_ripple);
            printf("--------------------------------------------------------------\n");
        }
    }

    fclose(dados);
}


void extrato(int cliente) {
    char senha1[7];
    printf("Digite sua senha: ");
    scanf("%s", senha1);

    if (strcmp(senha1, senhas[cliente]) == 0) {
        printf("--------------------------------------------------------------\n");
        printf("Extrato de %s:\n", nomes[cliente]);
        ler_dados(cliente);
    } else {
        printf("Senha incorreta. Digite novamente.\n");
    }
}


void depositar(int cliente) {
    float v_d;

    printf("Valor do depósito (R$): ");
    scanf("%f", &v_d);
    reais[cliente] += v_d; // Atualiza o saldo
    printf("Depósito realizado. Saldo atual: R$ %.2f\n", reais[cliente]);

    // Grava os dados do depósito
    salvar_dados(cliente,'+', v_d, "REAL", "COT", 0.0, "TAXA", 0.0, reais[cliente], bitcoin[cliente], ethereum[cliente], ripple[cliente]);
}

void sacar(int cliente) {
    char senha1[7];
    float v_s;
    printf("Digite sua senha: ");
    scanf("%s", senha1);

    if (strcmp(senha1, senhas[cliente]) == 0) {
        printf("Valor do saque (R$): ");
        scanf("%f", &v_s);

        if (v_s > reais[cliente]) {
            printf("Saldo inferior ao saque solicitado.\n");
        } else {
            reais[cliente] -= v_s; // Atualiza o saldo
            printf("Saque realizado. Saldo atual: R$ %.2f\n", reais[cliente]);
            salvar_dados(cliente,'-', v_s, "REAL", "COT", 0.0, "TAXA", 0.0, reais[cliente], bitcoin[cliente], ethereum[cliente], ripple[cliente]);
        }
    } else {
        printf("Senha incorreta. Digite novamente.\n");
    }

}

void menu_completo(int cliente) {
    int opcao_menu;

    while (1) {
        printf("==----------------------------==\n");
        printf("Menu: \n");
        printf("1. Consultar saldo\n");
        printf("2. Consultar extrato\n");
        printf("3. Depositar\n");
        printf("4. Sacar\n");
        printf("5. Comprar criptomoedas\n");
        printf("6. Vender criptomoedas\n");
        printf("7. Atualizar cotação\n");
        printf("8. Sair\n");
        printf("==----------------------------==\n");
        printf("Escolha sua opção: ");
        scanf("%d", &opcao_menu);

        switch (opcao_menu) {
            case 1:
                consultar_saldo(cliente);
                break;
            case 2:
                extrato(cliente);
                break;
            case 3:
            depositar(cliente);                
        break;
            case 4:
                sacar(cliente);
                break;
            case 5:
                // A ser implementada
                break;
            case 6:
                // A ser implementada
                break;
            case 7:
                // A ser implementada
                break;
            case 8:
                return;
            default:
                printf("Opção inválida. Tente novamente.\n");
                break;
        }
    }
}

void encerrar_programa() { 
    printf("==--------------------------------------------------==\n");
    printf("Encerrando o Programa. Obrigado por trabalhar conosco!\n");
    printf("==--------------------------------------------------==\n");
    exit(0); 
}

void efetuar_login() {
    char cpf_login[12];  // 11 dígitos + 1 para o caractere nulo
    char senha_login[7]; // 6 dígitos + 1 para o caractere nulo
    int opcao_login;

    while (1) {
        printf("==--------------------------------------==\n");
        printf("Seja bem-vindo à Exchange de Criptomoedas!\n");
        printf("1 - Efetuar Login\n");
        printf("2 - Sair\n");
        printf("==--------------------------------------==\n");
        printf("Por favor, selecione a opção desejada: ");
        scanf("%d", &opcao_login);

        if (opcao_login == 2){
            encerrar_programa(); // Saída
        } else if (opcao_login != 1){
            printf("Opção irreconhecível. Tente novamente.\n");
        } else {
            printf("Digite seu CPF (Somente números): ");
            scanf("%s", cpf_login);

            printf("Digite sua senha (Somente números): ");
            scanf("%s", senha_login);

            for (int i = 0; i < 4; i++) {
                if (strcmp(cpfs[i], cpf_login) == 0 && strcmp(senhas[i], senha_login) == 0) {
                    printf("==--------------------------------------==\n");
                    printf("É bom te ter de volta, %s :)\n", nomes[i]);
                    menu_completo(i);
                    return; 
                }
            } 
            printf("CPF ou senha inválidos. Tente novamente.\n");
        }
    }
}

int main() {

    carregar_saldos();
    while (1) {
        efetuar_login();
    }

    return 0;
}
